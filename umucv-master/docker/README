Los paquetes necesarios para ejecutar todos los programas de ejemplo
están instalados en las siguientes imágenes docker.

umucv/python:umucv  (5.36 GB, para ejecutar con CPU)

umucv/python:cuda   (8.58 GB, para ejecutar con GPU)

El script "run" ejecuta la imagen con las variables de entorno adecuadas
para que se muestren correctamente las ventanas de opencv. Además, monta
en el contenedor el directorio del repositorio para ejecutar fácilmente
los ejemplos.

$ ./run 
euler@df2414a90deb:~$ ls
cuda  umucv
euler@df2414a90deb:~$ cd umucv/code/
euler@df2414a90deb:~/umucv/code$ ./stream.py 
640x480 30.0fps
euler@df2414a90deb:~/umucv/code$ cd hog/
euler@df2414a90deb:~/umucv/code/hog$ ./facelandmarks.py 
640x480 30.0fps
euler@df2414a90deb:~/umucv/code/hog$ cd ../DL/yolo
euler@df2414a90deb:~/umucv/code/DL/yolo$ python yolo-v3.py
640x480 30.0fps

etc.

Edita el script para montar otros volúmenes, incluir otra webcam, o cambiar
la imagen que se ejecuta.

IMPORTANTE: recuerda que las imágenes docker se ejecutan con privilegios de
administración. Los cambios en la imagen se pierden al salir, pero tenemos
acceso completo a las carpetas montadas: hay que tener cuidado para no borrar
nada importante.

Para guardar cambios en un contenedor se utiliza el comando docker commit.
Esto permite, por ejemplo, instalar paquetes adicionales o una versión
actualizada de umucv sin tener que repetirlo cada vez que arrancamos el contenedor.
Con docker ps en otro terminal consultamos el nombre del contenedor que se está
ejecutando, y lo salvamos con docker commit <contenedor> <nombre/imagen:version>.
(Para arrancarlo debemos cambiar el nombre de la imagen en el script run).


Para acceder a la gpu puede ser necesario instalar

https://github.com/NVIDIA/nvidia-docker

